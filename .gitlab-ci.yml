stages:
  - test
  - build
  - release
  - deploy

variables:
  CONTAINER_IMAGE: ${CI_REGISTRY}/${CI_PROJECT_PATH}
  NAMESPACE: hosting
  SECRET: gitlab-registry
  REPOSITORY: ${CI_REGISTRY}/${CI_PROJECT_PATH}

.docker-login: &docker-login
  before_script:
    - docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}

test-build:
  services:
  image: docker:latest
  stage: test
  tags:
    - build
  script:
    - docker build -t ${CONTAINER_IMAGE}:${CI_COMMIT_SHA:0:8} .
    - docker rmi --force ${CONTAINER_IMAGE}:${CI_COMMIT_SHA:0:8}
  except:
    - develop
    - master
    - staging
    - tags

unit-tests:
  image: golang:1.9-alpine
  stage: test
  tags:
    - test
  before_script:
    - mkdir -p /go/src/git.containerum.net/${CI_PROJECT_PATH%/*}
    - ln -sf ${CI_PROJECT_DIR} /go/src/git.containerum.net/${CI_PROJECT_PATH}
    - cd /go/src/git.containerum.net/${CI_PROJECT_PATH}
  script:
    - go test -v -cover ./...
  except:
    - develop
    - master
    - staging
    - tags


dev-release:
  image: docker:latest
  stage: release
  tags:
    - build
  <<: *docker-login
  script:
    - docker build -t ${CONTAINER_IMAGE}:${CI_COMMIT_SHA:0:8} .
    - docker push ${CONTAINER_IMAGE}:${CI_COMMIT_SHA:0:8}
    - docker rmi --force ${CONTAINER_IMAGE}:${CI_COMMIT_SHA:0:8}
  only:
    - develop

dev-deploy:
  image: exon/helm
  stage: deploy
  tags:
    - develop
  before_script:
    - mkdir -p /etc/deploy/
    - echo ${SANDBOX_KUBE_CONFIG} | base64 -d > ${KUBECONFIG}
    - helm init --client-only
    - helm repo update
  environment:
    name: develop
  script:
    - cd charts/mail
    - helm upgrade --install --debug --namespace=${NAMESPACE} ${CI_PROJECT_NAME} --set image.tag=${CI_COMMIT_SHA:0:8} --set image.secret=${SECRET} --set image.repository=${REPOSITORY} --set service.externalIP=192.168.88.210 --values values.yaml .
  only:
    - develop


pub-github:
  image: alpine
  stage: deploy
  tags:
    - build
  before_script:
    - apk update
    - apk upgrade
    - apk add --no-cache bash git openssh
    - git config --global user.email "info@containerum.io"
    - git config --global user.name "Containerum Bot"
    - mkdir -p ~/.ssh
    - echo ${ID_RSA_GITHUB} | base64 -d > ~/.ssh/id_rsa
    - echo ${ID_RSA_PUB_GITHUB} | base64 -d > ~/.ssh/id_rsa.pub
    - chmod 600 ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa.pub
    - eval `ssh-agent -s`
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H github.com >> ~/.ssh/known_hosts
  script:
    - git remote show
    - if [ $(git remote show | grep github) ]; then git remote rm github; fi
    - if [ $(git branch --list | grep pub) ]; then git branch -d pub; fi
    - git remote add github ${GITHUB_REMOTE}
    - git pull origin develop
    - git fetch github
    - git checkout origin/develop
    - git checkout -b pub
    - git push -u github pub:develop --force
    - git remote rm github
  only:
    - develop


stage-release:
  image: docker:latest
  stage: release
  tags:
    - build
  <<: *docker-login
  script:
    - docker build -t ${CONTAINER_IMAGE}:${CI_COMMIT_SHA:0:8} .
    - docker push ${CONTAINER_IMAGE}:${CI_COMMIT_SHA:0:8}
    - docker rmi --force ${CONTAINER_IMAGE}:${CI_COMMIT_SHA:0:8}
  only:
    - master


prod-release:
  image: docker:latest
  stage: release
  tags:
    - build
  <<: *docker-login
  script:
    - docker pull ${CONTAINER_IMAGE}:${CI_COMMIT_SHA:0:8}
    - docker tag ${CONTAINER_IMAGE}:${CI_COMMIT_SHA:0:8} ${CONTAINER_IMAGE}:latest
    - docker tag ${CONTAINER_IMAGE}:${CI_COMMIT_SHA:0:8} ${CONTAINER_IMAGE}:${CI_COMMIT_TAG}
    - docker push ${CONTAINER_IMAGE}:latest
    - docker push ${CONTAINER_IMAGE}:${CI_COMMIT_TAG}
    - docker rmi --force ${CONTAINER_IMAGE}:${CI_COMMIT_SHA:0:8}
  only:
    - tags

prod-deploy:
  image: exon/helm
  stage: deploy
  tags:
    - production
  before_script:
    - mkdir -p /etc/deploy/
    - echo ${PRODUCTION_KUBE_CONFIG_2} | base64 -d > ${KUBECONFIG}
    - helm init --client-only
    - helm repo update
  environment:
    name: production
    url: https://web.containerum.io
  script:
    - cd charts/api-gateway
    - helm upgrade --install --namespace=${NAMESPACE} ${CI_PROJECT_NAME} --set image.tag=${CI_COMMIT_TAG} --set image.secret=${SECRET} --set image.repository=${REPOSITORY} --set service.externalIP=${PRODUCTION_IP} --values values.yaml .
  only:
    - tags
  when: manual
