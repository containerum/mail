stages:
  - test
  - build
  - deploy

.create_tag: &create_tag
  before_script:
    - export DATE=$(date +"%Y-%m-%d")
    - export TAG="${DATE}-${CI_COMMIT_SHA:0:8}"

build-and-push-develop:
  <<: *create_tag
  services:
    - docker:dind
  image: docker:latest
  stage: build
  tags:
    - build
  script:
    - docker login ${DOCKER_REGISTRY} -u "$DOCKER_REGISTRY_USER" -p "$DOCKER_REGISTRY_PASSWORD"
    - docker build --pull -t ${DOCKER_REGISTRY_IMAGE}:${TAG} .
    - docker push "${DOCKER_REGISTRY_IMAGE}:${TAG}"
  only:
    - develop

deploy-to-kubernetes-develop:
  <<: *create_tag
  image: mastanggt/kubectl:latest
  stage: deploy
  tags:
    - deploy
  script:
    - export IMAGE="$DOCKER_REGISTRY_IMAGE:${TAG}"
    - echo $SANDBOX_KUBE_CONFIG | base64 -d > admin.conf
    - cat deploy-template.yaml | envsubst > deploy.yaml
    - kubectl --kubeconfig=admin.conf replace -f deploy.yaml
  only:
    - develop

github publish:
  image: alpine
  stage: deploy
  tags:
    - build
  before_script:
    - apk update
    - apk upgrade
    - apk add --no-cache bash git openssh
    - git config --global user.email "info@containerum.io"
    - git config --global user.name "Containerum Bot"
    - mkdir -p ~/.ssh
    - echo ${ID_RSA_GITHUB} | base64 -d > ~/.ssh/id_rsa
    - echo ${ID_RSA_PUB_GITHUB} | base64 -d > ~/.ssh/id_rsa.pub
    - chmod 600 ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa.pub
    - eval `ssh-agent -s`
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H github.com >> ~/.ssh/known_hosts
  script:
    - git remote show
    - if [ $(git remote show | grep github) ]; then git remote rm github; fi
    - if [ $(git branch --list | grep pub) ]; then git branch -d pub; fi
    - git remote add github ${GITHUB_REMOTE}
    - git pull origin develop
    - git fetch github
    - git checkout origin/develop
    - git checkout -b pub
    - git push -u github pub:develop --force
    - git remote rm github
  only:
    - develop


docker-build-test:
  <<: *create_tag
  services:
    - docker:dind
  image: docker:latest
  stage: test
  tags:
    - test
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
    - docker build --pull -t ${CI_REGISTRY_IMAGE}:${TAG} .
    - docker rmi -f ${CI_REGISTRY_IMAGE}:${TAG}
  except:
    - develop

.correct_workdir: &correct_workdir
  before_script:
    - mkdir -p /go/src/git.containerum.net/${CI_PROJECT_PATH%/*}
    - ln -sf ${CI_PROJECT_DIR} /go/src/git.containerum.net/${CI_PROJECT_PATH}
    - cd /go/src/git.containerum.net/${CI_PROJECT_PATH}

unit-tests:
  <<: *correct_workdir
  image: golang:1.9-alpine
  stage: test
  tags:
    - test
  script:
    - go test -v -cover ./...
