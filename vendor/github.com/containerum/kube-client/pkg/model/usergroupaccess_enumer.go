// Code generated by "enumer -type UserGroupAccess -trimprefix Access -transform=snake -json -sql -text -yaml"; DO NOT EDIT.

package model

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _UserGroupAccessName = "noneguestmembermasteradmin"

var _UserGroupAccessIndex = [...]uint8{0, 4, 9, 15, 21, 26}

func (i UserGroupAccess) String() string {
	if i >= UserGroupAccess(len(_UserGroupAccessIndex)-1) {
		return fmt.Sprintf("UserGroupAccess(%d)", i)
	}
	return _UserGroupAccessName[_UserGroupAccessIndex[i]:_UserGroupAccessIndex[i+1]]
}

var _UserGroupAccessValues = []UserGroupAccess{0, 1, 2, 3, 4}

var _UserGroupAccessNameToValueMap = map[string]UserGroupAccess{
	_UserGroupAccessName[0:4]:   0,
	_UserGroupAccessName[4:9]:   1,
	_UserGroupAccessName[9:15]:  2,
	_UserGroupAccessName[15:21]: 3,
	_UserGroupAccessName[21:26]: 4,
}

// UserGroupAccessString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func UserGroupAccessString(s string) (UserGroupAccess, error) {
	if val, ok := _UserGroupAccessNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to UserGroupAccess values", s)
}

// UserGroupAccessValues returns all values of the enum
func UserGroupAccessValues() []UserGroupAccess {
	return _UserGroupAccessValues
}

// IsAUserGroupAccess returns "true" if the value is listed in the enum definition. "false" otherwise
func (i UserGroupAccess) IsAUserGroupAccess() bool {
	for _, v := range _UserGroupAccessValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for UserGroupAccess
func (i UserGroupAccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for UserGroupAccess
func (i *UserGroupAccess) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("UserGroupAccess should be a string, got %s", data)
	}

	var err error
	*i, err = UserGroupAccessString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for UserGroupAccess
func (i UserGroupAccess) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for UserGroupAccess
func (i *UserGroupAccess) UnmarshalText(text []byte) error {
	var err error
	*i, err = UserGroupAccessString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for UserGroupAccess
func (i UserGroupAccess) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for UserGroupAccess
func (i *UserGroupAccess) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = UserGroupAccessString(s)
	return err
}

func (i UserGroupAccess) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *UserGroupAccess) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := UserGroupAccessString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
